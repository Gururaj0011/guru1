// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract PhoneCallSelection {
    address public caller;
    address public sim1;
    address public sim2;
    mapping(address => uint256) public callsPerOwner;

    constructor(address _sim1, address _sim2) {
        sim1 = _sim1;
        sim2 = _sim2;
        caller = msg.sender;
    }

    function selectSim(uint256 sim) external view {
        require(msg.sender == caller, "Only the caller can select a sim");
        assert(sim == 1 || sim == 2);
        
        if (sim == 1) {
            revert("no Recharge for sim one");
        } else if (sim == 2) {
            
        }
    }

    function CallsPerOwner() external {
        require(msg.sender == caller, "Only the owner can check calls");
        require(callsPerOwner[caller] < 2, "Owner can call to selected sim only twice");

        
        callsPerOwner[caller]++;
    }
}
